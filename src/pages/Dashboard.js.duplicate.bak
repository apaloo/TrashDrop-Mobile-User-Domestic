import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import appConfig from '../utils/app-config.js';
import { useAuth } from '../context/AuthContext.js';
import DashboardSkeleton from '../components/SkeletonLoader.js';
import ActivePickupCard from '../components/ActivePickupCard.js';
import supabase from '../utils/supabaseClient.js';
import { userService, activityService, pickupService } from '../services/index.js';
import { 
  cacheUserStats, 
  getCachedUserStats, 
  cacheUserActivity, 
  getCachedUserActivity,
  isOnline 
} from '../utils/offlineStorage.js';
import { subscribeToStatsUpdates, handleStatsUpdate, subscribeToDumpingReports, handleDumpingReportUpdate } from '../utils/realtime.js';

// Lazy-loaded map components removed since map is not currently used in dashboard
// Can be re-enabled when map functionality is needed

/**
 * Dashboard page component showing user's activity and nearby trash drop points
 */
const Dashboard = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    points: 0,
    pickups: 0,
    reports: 0,
    batches: 0,
    totalBags: 0,
  });
  const [recentActivity, setRecentActivity] = useState([]);
  const [activePickup, setActivePickup] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isOnlineStatus, setIsOnlineStatus] = useState(isOnline());
  const [dataSource, setDataSource] = useState('loading'); // 'cache', 'network', 'loading'
  const sessionRefreshRef = useRef(null);
  const mountedRef = useRef(true);
  
  // Cleanup function
  useEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);

  // Set up real-time subscriptions for stats updates
  useEffect(() => {
    if (!user?.id) return;

    console.log('[Dashboard] Setting up real-time stats subscription');
    const subscription = subscribeToStatsUpdates(user.id, (tableType, payload) => {
      if (!mountedRef.current) return;

      console.log(`[Dashboard] Real-time ${tableType} update received`);      
      // Update stats based on real-time payload
      setStats(prevStats => handleStatsUpdate(tableType, payload, prevStats));
      
      // For activity updates, we might need to update the recent activity list
      if (tableType === 'user_activity' && payload.eventType === 'INSERT') {
        setRecentActivity(prev => {
          const newRecord = payload.new;
          if (!newRecord) return prev;
          return [newRecord, ...prev.slice(0, prev.length > 4 ? 4 : prev.length - 1)];
        });
      }
    });

    return () => {
      console.log('[Dashboard] Cleaning up real-time stats subscription');
      subscription.unsubscribe();
    };
  }, [user?.id]);

  // Set up real-time subscription for dumping reports to trigger stats refresh
  useEffect(() => {
    if (!user?.id) return;

    console.log('[Dashboard] Setting up dumping reports subscription for stats refresh');
    const dumpingSubscription = subscribeToDumpingReports(user.id, (payload) => {
      if (!mountedRef.current) return;

      console.log('[Dashboard] Dumping report update received, refreshing stats');
      // Use the handler to trigger stats refresh
      handleDumpingReportUpdate(payload, () => {
        // Reload dashboard data to get updated stats
        if (mountedRef.current) {
          loadDashboardData();
        }
      });
    });

    return () => {
      console.log('[Dashboard] Cleaning up dumping reports subscription');
      dumpingSubscription.unsubscribe();
    };
  }, [user?.id]);

  // Online status listener
  useEffect(() => {
    const handleOnlineStatusChange = () => {
      setIsOnlineStatus(isOnline());
    };

    window.addEventListener('online', handleOnlineStatusChange);
    window.addEventListener('offline', handleOnlineStatusChange);

    return () => {
      window.removeEventListener('online', handleOnlineStatusChange);
      window.removeEventListener('offline', handleOnlineStatusChange);
    };
  }, []);

  // Optimized session refresh function with caching
  const getValidSession = useCallback(async () => {
    // Return cached result if still valid
    if (sessionRefreshRef.current && 
        sessionRefreshRef.current.timestamp > Date.now() - 300000) { // 5 minutes cache
      return sessionRefreshRef.current.result;
    }

    // Special cases
    if (user && user.email === 'prince02@mailinator.com') {
      const result = { success: true, testAccount: true };
      sessionRefreshRef.current = { result, timestamp: Date.now() };
      return result;
    }

    if (appConfig?.features?.enableMocks) {
      const result = { success: true, mock: true };
      sessionRefreshRef.current = { result, timestamp: Date.now() };
      return result;
    }

    try {
      const { data, error } = await supabase.auth.refreshSession();
      const result = error ? 
        { success: true, noSession: true, error } : 
        { success: true, session: data.session };
      
      sessionRefreshRef.current = { result, timestamp: Date.now() };
      return result;
    } catch (err) {
      const result = { success: true, noSession: true, error: err };
      sessionRefreshRef.current = { result, timestamp: Date.now() };
      return result;
    }
  }, [user]);

  // Optimized Dashboard data loading function with caching and offline support
  const loadDashboardData = useCallback(async () => {
    if (!user?.id) {
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      
      // First check for cached data and display it immediately if available
      const cachedStats = await getCachedUserStats(user.id);
      const cachedActivity = await getCachedUserActivity(user.id);
      
      // If we have cached data, use it immediately to speed up initial render
      if (cachedStats) {
        console.log('Using cached stats data');
        setStats({
          points: cachedStats?.points || 0,
          pickups: cachedStats?.pickups || 0,
          reports: cachedStats?.reports || 0,
          batches: cachedStats?.batches || 0,
          totalBags: cachedStats?.totalBags || 0,
        });
        setDataSource('cache');
        // Only reduce loading state if we have both stats and activity
        if (cachedActivity?.length > 0) {
          setIsLoading(false);
        }
      }
      
      if (cachedActivity?.length > 0) {
        console.log('Using cached activity data');
        setRecentActivity(cachedActivity.map(activity => ({
          id: activity.id,
          type: activity.type,
          message: activity.details || `${activity.type} activity`,
          timestamp: activity.created_at,
          points: activity.points || 0
        })));
        // Only reduce loading state if we already set stats
        if (cachedStats) {
          setIsLoading(false);
        }
      }
      
      // Check if online before making network requests
      if (isOnlineStatus) {
        // Load fresh dashboard data in parallel - don't await, let it load in background
        const statsPromise = userService.getUserStats(user.id);
        const activityPromise = activityService.getUserActivity(user.id, 5);
        
        // Process stats when it completes
        statsPromise.then(result => {
          if (!result.error && mountedRef.current) {
            const statsData = result.data;
            setStats({
              points: statsData?.points || 0,
              pickups: statsData?.pickups || 0,
              reports: statsData?.reports || 0,
              batches: statsData?.batches || 0,
              totalBags: statsData?.totalBags || 0,
            });
            setDataSource('network');
            
            // Cache the new stats for offline use
            cacheUserStats(user.id, statsData);
          }
        }).catch(error => {
          console.error('Error fetching stats:', error);
          // If we don't have cached data and the network request failed,
          // we should clear loading state
          if (!cachedStats && mountedRef.current) {
            setIsLoading(false);
          }
        });
        
        // Process activity when it completes
        activityPromise.then(result => {
          if (!result.error && result.data?.length > 0 && mountedRef.current) {
            const activityData = result.data;
            setRecentActivity(activityData.map(activity => ({
              id: activity.id,
              type: activity.type,
              message: activity.details || `${activity.type} activity`,
              timestamp: activity.created_at,
              points: activity.points || 0
            })));
            
            // Cache the new activity data for offline use
            cacheUserActivity(user.id, activityData);
          }
          // Make sure to clear loading state even if we don't have activity data
          if (mountedRef.current) {
            setIsLoading(false);
          }
        }).catch(error => {
          console.error('Error fetching activity:', error);
          // Clear loading state
          if (mountedRef.current) {
            setIsLoading(false);
          }
        });
      } else {
        // We're offline and have shown cached data if available
        // If we don't have cached data, clear loading state
        if (!cachedStats || !cachedActivity) {
          setIsLoading(false);
        }
      }
    } catch (error) {
      console.error('Error in dashboard data loading:', error);
      setIsLoading(false);
    }
  }, [user?.id, isOnlineStatus]);

  // Call loadDashboardData when dependencies change and setup auto-refresh
  useEffect(() => {
    // Initial load
    loadDashboardData();
    
    // Set up auto-refresh interval when online
    const autoRefreshInterval = setInterval(() => {
      if (isOnlineStatus && mountedRef.current) {
        console.log('[Dashboard] Auto-refreshing data...');
        loadDashboardData();
      }
    }, 30000); // Auto-refresh every 30 seconds when online
    
    return () => {
      clearInterval(autoRefreshInterval);
    };
  }, [loadDashboardData, isOnlineStatus]);

  // Memoized calculations for better performance
  const memoizedStats = useMemo(() => ({
    batchLevel: Math.floor(stats.batches / 2) + 1,
    pickupLevel: Math.floor(stats.pickups / 5) + 1,
    pointsLevel: Math.floor(stats.points / 100) + 1,
    batchProgress: (stats.batches % 2) * 50,
    pickupProgress: (stats.pickups % 5) * 20,
    pointsProgress: stats.points % 100,
    batchesNeeded: 2 - (stats.batches % 2),
    pickupsNeeded: 5 - (stats.pickups % 5),
    pointsNeeded: 100 - (stats.points % 100),
    hasPickupAchievement: stats.pickups >= 5,
    hasPointsAchievement: stats.points >= 250
  }), [stats]);

  const ActivityIcon = ({ type }) => {
    if (type === 'pickup') {
      return (
        <svg className="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
        </svg>
      );
    }
    return (
      <svg className="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
    );
  };

  // Manual refresh function for pull-to-refresh functionality
  const handleManualRefresh = useCallback(() => {
    if (!isOnlineStatus) {
      // If offline, just show a toast or alert
      console.log('Cannot refresh while offline');
      return;
    }
    
    // Don't set isLoading true here to avoid skeleton flash
    setDataSource('loading'); // Just indicate refresh is happening
    
    // Clear all promises and start fresh
    const statsPromise = userService.getUserStats(user.id);
    const activityPromise = activityService.getUserActivity(user.id, 5);
    
    Promise.all([statsPromise, activityPromise])
      .then(([statsResult, activityResult]) => {
        if (!mountedRef.current) return;
        
        // Handle stats update
        if (!statsResult.error) {
          const statsData = statsResult.data;
          setStats({
            points: statsData?.points || 0,
            pickups: statsData?.pickups || 0,
            reports: statsData?.reports || 0,
            batches: statsData?.batches || 0,
            totalBags: statsData?.totalBags || 0,
          });
          setDataSource('network');
          // Cache the refreshed data
          cacheUserStats(user.id, statsData);
        }
        
        // Handle activity update
        if (!activityResult.error && activityResult.data?.length > 0) {
          const activityData = activityResult.data;
          setRecentActivity(activityData.map(activity => ({
            id: activity.id,
            type: activity.type,
            message: activity.details || `${activity.type} activity`,
            timestamp: activity.created_at,
            points: activity.points || 0
          })));
          // Cache the refreshed activity
          cacheUserActivity(user.id, activityData);
        }
      })
      .catch(error => {
        console.error('Error during manual refresh:', error);
      })
      .finally(() => {
        if (mountedRef.current) {
          setDataSource('network'); // Ensure we clear the loading state
        }
      });
  }, [user?.id, isOnlineStatus]);
  
  // Show skeleton loader during initial loading, but only if we have no cached data
  // This prevents screen flash when we have cached data available
  if (isLoading && dataSource === 'loading' && !getCachedUserStats(user?.id) && !getCachedUserActivity(user?.id)) {
    return <DashboardSkeleton />;
  }

  return (
    <div className="min-h-screen bg-gray-800">
      {/* Header - Fixed with App Theme - Matched to QR Scanner */}
      <div className="bg-gray-800 px-4 py-4 fixed top-16 left-0 right-0 z-40 shadow-md">
        <div className="flex items-center justify-center">
          <h1 className="text-2xl font-bold text-center text-white flex items-center">
            Dashboard
            {dataSource === 'loading' && (
              <svg className="w-5 h-5 text-white ml-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            )}
            {dataSource === 'cache' && (
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 ml-2">
                Cached
              </span>
            )}
          </h1>
        </div>
        
        {/* Offline indicator */}
        {!isOnlineStatus && (
          <div className="flex items-center justify-center text-red-100 bg-red-600 py-1 px-2 rounded-md mt-2">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-sm font-medium">Offline Mode - Using Cached Data</span>
          </div>
        )}
      </div>

      {/* Main Content - Adjusted for fixed header */}
      <div className="container mx-auto px-4 pt-24 pb-8">
        {/* Stats Cards - Optimized Design with Enhanced Gamification */}
        <div className="mb-6">
          <div className="flex gap-3 overflow-x-auto pb-2 snap-x snap-mandatory scrollbar-hide">
            <style>{`
              .scrollbar-hide {
                -ms-overflow-style: none;
                scrollbar-width: none;
              }
              .scrollbar-hide::-webkit-scrollbar {
                display: none;
              }
            `}</style>
                        {/* Batches Card - Dark Theme Consistent - Optimized Size */}
            <div className="bg-gray-800 rounded-lg shadow-lg p-4 min-w-[240px] flex-shrink-0 snap-center border border-indigo-700 relative overflow-hidden">
              {/* Background Pattern */}
              <div className="absolute top-0 right-0 w-12 h-12 bg-indigo-500 rounded-full opacity-10 transform translate-x-6 -translate-y-6"></div>
              
              {/* Header with Level Badge */}
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-2">
                  <div className="w-10 h-10 bg-gradient-to-br from-indigo-400 to-indigo-600 rounded-lg flex items-center justify-center shadow-lg">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-base font-bold text-white">Batches</h3>
                    <p className="text-xs text-gray-300">Processing Groups</p>
                  </div>
                </div>
                <div className="bg-indigo-500 text-white px-2 py-0.5 rounded-full text-xs font-bold">
                  Lv {Math.floor(stats.batches / 2) + 1}
                </div>
              </div>
              
              {/* Main Batches Display */}
              <div className="text-center mb-3">
                <div className="text-3xl font-black text-indigo-400">
                  {stats.batches}
                </div>
                <p className="text-xs text-gray-300 mt-0.5">Processing Batches</p>
              </div>
              
              {/* Progress Bar */}
              <div className="space-y-1">
                <div className="flex justify-between text-xs font-medium">
                  <span className="text-gray-300">Level Progress</span>
                  <span className="text-indigo-400">{2 - (stats.batches % 2)} more to level up</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2 relative overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-indigo-400 to-indigo-600 h-2 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${(stats.batches % 2) * 50}%` }}
                  ></div>
                </div>
              </div>
            </div>

            {/* Duplicate Batches Card - Dark Theme Consistent - Emerald Theme */}
            <div className="bg-gray-800 rounded-lg shadow-lg p-4 min-w-[240px] flex-shrink-0 snap-center border border-emerald-700 relative overflow-hidden">
              {/* Background Pattern */}
              <div className="absolute top-0 right-0 w-12 h-12 bg-emerald-500 rounded-full opacity-10 transform translate-x-6 -translate-y-6"></div>
              
              {/* Header with Level Badge */}
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-2">
                  <div className="w-10 h-10 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-lg flex items-center justify-center shadow-lg">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-base font-bold text-white">Batches</h3>
                    <p className="text-xs text-gray-300">Processing Groups</p>
                  </div>
                </div>
                <div className="bg-emerald-500 text-white px-2 py-0.5 rounded-full text-xs font-bold">
                  Lv {Math.floor(stats.batches / 2) + 1}
                </div>
              </div>
              
              {/* Main Batches Display */}
              <div className="text-center mb-3">
                <div className="text-3xl font-black text-emerald-400">
                  {stats.batches}
                </div>
                <p className="text-xs text-gray-300 mt-0.5">Processing Batches</p>
              </div>
              
              {/* Progress Bar */}
              <div className="space-y-1">
                <div className="flex justify-between text-xs font-medium">
                  <span className="text-gray-300">Level Progress</span>
                  <span className="text-emerald-400">{2 - (stats.batches % 2)} more to level up</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2 relative overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-emerald-400 to-emerald-600 h-2 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${(stats.batches % 2) * 50}%` }}
                  ></div>
                </div>
              </div>
            </div>

            {/* Points Card - Consistent with Original Dark Theme */}
            <div className="bg-gray-800 rounded-lg shadow-lg p-6 min-w-[280px] flex-shrink-0 snap-center border border-gray-700 relative overflow-hidden">
              {/* Background Pattern */}
              <div className="absolute top-0 right-0 w-16 h-16 bg-yellow-500 rounded-full opacity-10 transform translate-x-6 -translate-y-6"></div>
              
              {/* Header with Level Badge */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-br from-yellow-400 to-amber-500 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white">Points</h3>
                    <p className="text-sm text-gray-300">Environmental Impact</p>
                  </div>
                </div>
                <div className="bg-yellow-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                  Lv {memoizedStats.pointsLevel}
                </div>
              </div>
              
              {/* Main Points Display */}
              <div className="text-center mb-4">
                <div className="text-4xl font-black text-yellow-400">
                  {stats.points.toLocaleString()}
                </div>
                <p className="text-sm text-gray-300 mt-1">Total Points Earned</p>
              </div>
              
              {/* Progress Bar */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm font-medium">
                  <span className="text-gray-300">Level Progress</span>
                  <span className="text-yellow-400">{memoizedStats.pointsNeeded} to next level</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-3 relative overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${memoizedStats.pointsProgress}%` }}
                  ></div>
                </div>
              </div>
              
              {/* Achievement Badge */}
              {memoizedStats.hasPointsAchievement && (
                <div className="mt-3 flex items-center justify-center">
                  <div className="bg-gradient-to-r from-green-400 to-emerald-500 text-white px-3 py-1 rounded-full text-xs font-bold flex items-center space-x-1 animate-bounce">
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    <span>Eco Warrior!</span>
                  </div>
                </div>
              )}
            </div>

            {/* Pickups Card - Dark Theme Consistent */}
            <div className="bg-gray-800 rounded-lg shadow-lg p-6 min-w-[280px] flex-shrink-0 snap-center border border-gray-700 relative overflow-hidden">
              {/* Background Pattern */}
              <div className="absolute top-0 right-0 w-16 h-16 bg-blue-500 rounded-full opacity-10 transform translate-x-6 -translate-y-6"></div>
              
              {/* Header with Level Badge */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-500 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white">Pickups</h3>
                    <p className="text-sm text-gray-300">Collections Done</p>
                  </div>
                </div>
                <div className="bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                  Lv {memoizedStats.pickupLevel}
                </div>
              </div>
              
              {/* Main Pickups Display */}
              <div className="text-center mb-4">
                <div className="text-4xl font-black text-blue-400">
                  {stats.pickups}
                </div>
                <p className="text-sm text-gray-300 mt-1">Successful Pickups</p>
              </div>
              
              {/* Progress Bar */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm font-medium">
                  <span className="text-gray-300">Level Progress</span>
                  <span className="text-blue-400">{memoizedStats.pickupsNeeded} more needed</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-3 relative overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-blue-400 to-blue-500 h-3 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${memoizedStats.pickupProgress}%` }}
                  ></div>
                </div>
              </div>
              
              {/* Achievement Badge */}
              {memoizedStats.hasPickupAchievement && (
                <div className="mt-3 flex items-center justify-center">
                  <div className="bg-gradient-to-r from-green-400 to-emerald-500 text-white px-3 py-1 rounded-full text-xs font-bold flex items-center space-x-1 animate-bounce">
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z" />
                    </svg>
                    <span>Collector Pro!</span>
                  </div>
                </div>
              )}
            </div>

            {/* Reports Card - Dark Theme Consistent */}
            <div className="bg-gray-800 rounded-lg shadow-lg p-6 min-w-[280px] flex-shrink-0 snap-center border border-gray-700 relative overflow-hidden">
              {/* Background Pattern */}
              <div className="absolute top-0 right-0 w-16 h-16 bg-red-500 rounded-full opacity-10 transform translate-x-6 -translate-y-6"></div>
              
              {/* Header with Level Badge */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-br from-red-400 to-red-500 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white">Reports</h3>
                    <p className="text-sm text-gray-300">Issues Reported</p>
                  </div>
                </div>
                <div className="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                  Lv {Math.floor(stats.reports / 3) + 1}
                </div>
              </div>
              
              {/* Main Reports Display */}
              <div className="text-center mb-4">
                <div className="text-4xl font-black text-red-400">
                  {stats.reports}
                </div>
                <p className="text-sm text-gray-300 mt-1">Environmental Reports</p>
              </div>
              
              {/* Progress Bar */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm font-medium">
                  <span className="text-gray-300">Level Progress</span>
                  <span className="text-red-400">{3 - (stats.reports % 3)} more to level up</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-3 relative overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-red-400 to-red-500 h-3 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${(stats.reports % 3) * 33.33}%` }}
                  ></div>
                </div>
              </div>
              
              {/* Achievement Badge */}
              {stats.reports >= 3 && (
                <div className="mt-3 flex items-center justify-center">
                  <div className="bg-gradient-to-r from-green-400 to-emerald-500 text-white px-3 py-1 rounded-full text-xs font-bold flex items-center space-x-1 animate-bounce">
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    <span>Watchdog!</span>
                  </div>
                </div>
              )}
            </div>

            {/* Batches Card - Dark Theme Consistent */}
            <div className="bg-gray-800 rounded-lg shadow-lg p-6 min-w-[280px] flex-shrink-0 snap-center border border-gray-700 relative overflow-hidden">
              {/* Background Pattern */}
              <div className="absolute top-0 right-0 w-16 h-16 bg-purple-500 rounded-full opacity-10 transform translate-x-6 -translate-y-6"></div>
              
              {/* Header with Level Badge */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-500 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-white">Batches</h3>
                    <p className="text-sm text-gray-300">Processing Groups</p>
                  </div>
                </div>
                <div className="bg-purple-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                  Lv {Math.floor(stats.batches / 2) + 1}
                </div>
              </div>
              
              {/* Main Batches Display */}
              <div className="text-center mb-4">
                <div className="text-4xl font-black text-purple-400">
                  {stats.batches}
                </div>
                <p className="text-sm text-gray-300 mt-1">Processing Batches</p>
              </div>
              
              {/* Progress Bar */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm font-medium">
                  <span className="text-gray-300">Level Progress</span>
                  <span className="text-purple-400">{2 - (stats.batches % 2)} more to level up</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-3 relative overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-purple-400 to-purple-500 h-3 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${(stats.batches % 2) * 50}%` }}
                  ></div>
                </div>
              </div>
              
              {/* Achievement Badge */}
              {stats.batches >= 2 && (
                <div className="mt-3 flex items-center justify-center">
                  <div className="bg-gradient-to-r from-green-400 to-emerald-500 text-white px-3 py-1 rounded-full text-xs font-bold flex items-center space-x-1 animate-bounce">
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z" clipRule="evenodd" />
                    </svg>
                    <span>Organizer!</span>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Essential Action Buttons - Restored from Original Design */}
        <div className="mb-8">
          <div className="grid gap-4">
            {/* Schedule Pickup Button */}
            <button 
              onClick={() => navigate('/schedule-pickup')}
              className="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-4 px-6 rounded-lg shadow-lg transition-all duration-200 flex items-center justify-center space-x-2"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <span>Digital Bin</span>
            </button>
            
            {/* View Rewards Button */}
            <button 
              onClick={() => navigate('/rewards')}
              className="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-4 px-6 rounded-lg shadow-lg transition-all duration-200 flex items-center justify-center space-x-2"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
              </svg>
              <span>View Rewards</span>
            </button>
          </div>
        </div>

        {/* Recent Activity */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-4 py-5 sm:p-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Recent Activity</h3>
            {recentActivity.length > 0 ? (
              <div className="flow-root">
                <ul className="-mb-8">
                  {recentActivity.map((activity, activityIdx) => (
                    <li key={activity.id}>
                      <div className="relative pb-8">
                        {activityIdx !== recentActivity.length - 1 ? (
                          <span className="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true" />
                        ) : null}
                        <div className="relative flex space-x-3">
                          <div className="flex h-8 w-8 items-center justify-center rounded-full">
                            <ActivityIcon type={activity.type} />
                          </div>
                          <div className="flex min-w-0 flex-1 justify-between space-x-4 pt-1.5">
                            <div>
                              <p className="text-sm text-gray-500">{activity.message}</p>
                            </div>
                            <div className="whitespace-nowrap text-right text-sm text-gray-500">
                              <span>{activity.points > 0 && `+${activity.points} pts`}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <p className="text-gray-500 text-center py-4">No recent activity</p>
            )}
          </div>
        </div>

        {/* Active Pickup Card */}
        {activePickup && (
          <div className="bg-white rounded-lg shadow">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Active Pickup</h3>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-blue-900">Status: {activePickup.status}</p>
                    <p className="text-sm text-blue-700">Collector: {activePickup.collector_name}</p>
                    <p className="text-sm text-blue-700">Location: {activePickup.address}</p>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-blue-700">{activePickup.number_of_bags} bags</p>
                    <p className="text-sm text-blue-700">+{activePickup.points} pts</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
