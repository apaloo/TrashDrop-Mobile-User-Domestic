/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst, NetworkOnly } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { setDefaultHandler, setCatchHandler } from 'workbox-routing';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\.[^/]+$/;
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
registerRoute(
  /^https:\/\/fonts\.googleapis\.com/,
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
registerRoute(
  /^https:\/\/fonts\.gstatic\.com/,
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache image files with a cache-first strategy for 30 days.
registerRoute(
  /\.(?:png|jpg|jpeg|svg|gif)$/,
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache map tiles with a cache-first strategy
registerRoute(
  /^https:\/\/.*tile\.openstreetmap\.org/,
  new CacheFirst({
    cacheName: 'map-tiles',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 200,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 Days
      }),
    ],
  })
);

// Cache API responses for pickup requests and reports
registerRoute(
  /\/api\/pickups|\/api\/reports/,
  new StaleWhileRevalidate({
    cacheName: 'api-responses',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Setup background sync for pickup requests and reports with a more comprehensive queue
const reportsSyncPlugin = new BackgroundSyncPlugin('offlineReportsQueue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 Hours (specified in minutes)
});

const pickupSyncPlugin = new BackgroundSyncPlugin('offlinePickupsQueue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 Hours (specified in minutes)
});

const locationsSyncPlugin = new BackgroundSyncPlugin('offlineLocationsQueue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 Hours (specified in minutes)
});

// Handle submission of illegal dumping reports
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/submit-report'),
  new StaleWhileRevalidate({
    cacheName: 'report-requests',
    plugins: [reportsSyncPlugin],
  }),
  'POST'
);

// Handle submission of pickup requests
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/submit-pickup'),
  new StaleWhileRevalidate({
    cacheName: 'pickup-requests',
    plugins: [pickupSyncPlugin],
  }),
  'POST'
);

// Handle saving locations
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/locations'),
  new StaleWhileRevalidate({
    cacheName: 'location-requests',
    plugins: [locationsSyncPlugin],
  }),
  'POST'
);

// Add offline fallback for critical app pages
registerRoute(
  ({ request }) => 
    request.mode === 'navigate' && 
    (request.url.includes('/report') || 
     request.url.includes('/pickup') || 
     request.url.includes('/profile')),
  async ({ event }) => {
    try {
      // Try network first
      return await networkFirstStrategy.handle(event);
    } catch (error) {
      // If network fails, return the cached offline page
      const cache = await caches.open('workbox-offline-fallbacks');
      return await cache.match('/offline.html') || Response.error();
    }
  }
);

// Define a networkFirst strategy for dynamic API content
const networkFirstStrategy = new NetworkFirst({
  cacheName: 'dynamic-content',
  plugins: [
    new ExpirationPlugin({
      maxEntries: 50,
      maxAgeSeconds: 24 * 60 * 60, // 24 hours
    }),
  ],
});

// Set default handler for all fetch requests
setDefaultHandler(new NetworkOnly());

// Define an offlineFallback strategy
const offlineFallback = async ({ event }) => {
  // Return cached shell for navigation requests
  if (event.request.mode === 'navigate') {
    const cache = await caches.open('workbox-offline-fallbacks');
    const cachedResponse = await cache.match('/offline.html');
    return cachedResponse;
  }
  // Return a placeholder image for image requests
  if (event.request.destination === 'image') {
    const cache = await caches.open('workbox-offline-fallbacks');
    const cachedResponse = await cache.match('/offline-image.png');
    return cachedResponse || Response.error();
  }
  // Return an empty response for other requests
  return Response.error();
};

// Set catch handler for offline fallbacks
setCatchHandler(offlineFallback);

// Cache the offline fallback page
self.addEventListener('install', (event) => {
  const files = ['/offline.html'];
  
  // Add a placeholder image for offline use
  if (self.location.pathname.includes('/trashdrop/')) {
    files.push('/trashdrop/offline-image.png');
  } else {
    files.push('/offline-image.png');
  }
  
  event.waitUntil(
    caches.open('workbox-offline-fallbacks').then((cache) => cache.addAll(files))
  );
});

// Add specific route handlers for critical app routes
registerRoute(
  ({ url }) => url.pathname === '/profile' || url.pathname === '/profile/',
  new NetworkFirst({
    cacheName: 'profile-page',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 5,
        maxAgeSeconds: 60 * 60, // 1 hour
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Listen for push notifications
self.addEventListener('push', (event) => {
  const data = event.data.json();
  const options = {
    body: data.body,
    icon: 'logo192.png',
    badge: 'logo192.png',
    data: {
      url: data.url
    }
  };

  event.waitUntil(
    self.registration.showNotification(data.title, options)
  );
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  if (event.notification.data.url) {
    event.waitUntil(
      self.clients.openWindow(event.notification.data.url)
    );
  }
});

// Track and respond to version changes
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames
          .filter(cacheName => cacheName.startsWith('trashdrop-'))
          .filter(cacheName => cacheName !== 'trashdrop-v1')
          .map(cacheName => caches.delete(cacheName))
      );
    })
  );
});
